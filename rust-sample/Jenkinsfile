pipeline {
  agent {
    node {
      label 'base'
    }

  }
  stages {
    stage('拉取代码') {
      agent none
      steps {
        git(url: '仓库地址', credentialsId: 'git-credentials', changelog: true, poll: false, branch: '$BRANCH')
        script {
          env.COMMIT_ID="${sh(script:'git rev-parse --short HEAD', returnStdout: true).trim()}"
          env.VERSION = "${env.COMMIT_ID}"
          env.IMAGE_NAME = "${env.IMAGE_REGISTRY}/${env.IMAGE_NAMESPACE}/${env.APP_NAME}:${env.VERSION}"
        }

      }
    }

    stage('编译项目并构建镜像') {
      agent none
      steps {
        container('base') {
          withCredentials([usernamePassword(credentialsId : 'image-registry-credentials' ,passwordVariable : 'IMAGE_PASSWD' ,usernameVariable : 'IMAGE_USER' ,)]) {
            sh 'echo $IMAGE_PASSWD | docker login $IMAGE_REGISTRY -u $IMAGE_USER --password-stdin'
          }

          sh """docker build -t $APP_NAME:$VERSION -f Dockerfile-builder ."""
        }

      }
    }

    stage('推送镜像') {
      agent none
      steps {
        container('base') {
          sh """docker tag $APP_NAME:$VERSION $IMAGE_NAME"""
          sh """docker push $IMAGE_NAME"""
        }

      }
    }

    stage('部署到集群') {
      agent none
      steps {
        container('base') {
          withCredentials([kubeconfigContent(credentialsId : 'kubeconfig-credentials' ,variable : 'KUBECONFIG' ,)]) {
            sh 'envsubst < deploy/prod/deployment.yaml | kubectl apply -f -'
            sh 'envsubst < deploy/prod/service.yaml | kubectl apply -f -'
          }

        }

      }
    }

  }
  environment {
    APP_NAME = 'rust-sample'
  }
}